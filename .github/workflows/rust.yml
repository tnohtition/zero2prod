# Name of your workflow
name: Rust CI

# Controls when the workflow will run
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# A workflow run is made up of one or more jobs
jobs:
  # The "build" job
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Add the PostgreSQL service container
    services:
      # Label used to access the service
      postgres:
        # Docker image to use
        image: postgres:17.5-alpine
        # Environment variables for the container
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: newsletter_test_db
        # Port mapping to access the service from the runner
        ports:
          - 5432:5432
        # Health check to wait until the database is ready
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    # Set environment variables for the steps
    env:
      # The connection string for sqlx
      DATABASE_URL: "postgres://postgres:postgres@localhost:5432/newsletter_test_db"

    # A sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2

      # New Step: Install sqlx-cli to run migrations
      - name: Install sqlx-cli
        run: cargo install sqlx-cli --no-default-features --features rustls,postgres

      # New Step: Run database migrations
      - name: Run migrations
        run: sqlx migrate run

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run Clippy
        run: cargo clippy -- -D warnings

      - name: Run tests
        run: cargo test --verbose

      - name: Build release version
        run: cargo build --release --verbose
